api_base_url = "https://cve.circl.lu/api/cve/"



class CVEDetailsFetcher {
  constructor() {
    this.cache = new CVELocalStorageCache
    this.api_handler = new CVEApiHandler(api_base_url)
    console.log("New details fetcher")
  }

  get(cve_id, callback) {
    console.log("Attempting to get " + cve_id)
    this.cache.get(cve_id, (result) => {
      console.log(result)
      if (!result || Object.keys(result).length === 0) {
        console.log("Cache missed for " + cve_id)
        this.api_handler.get(cve_id, callback)
      } else {
        console.log("Local cache hit! (" + cve_id + ")")
        callback(result)
      }
    })
  }
}

class CVELocalStorageCache {
  constructor() { }

  get(cve_id, callback) {
    chrome.storage.local.get([cve_id], (result) => {
      console.log("Local cache checked for " + cve_id)
      callback(result)
    })
  }

  set(cve_id, value) {
    chrome.storage.local.set({ cve_id: value }, () => { 
      console.log("Local cache set for " + cve_id)
    })
  }
}

class CVEApiHandler {
  constructor(api_base_url) {
    this.cache = new CVELocalStorageCache
    this.base_url = api_base_url
  }

  get(cve_id, callback) {
    console.log("Making api request for " + cve_id)
    fetch(this.base_url + cve_id)
      .then(response => response.json())
      .then(response => { 
        this.cache.set(cve_id, response)
        callback(response) 
      })
  }
}

chrome.runtime.onMessage.addListener(
  (request, sender, sendResponse) => {
    switch (request.type) {
      case 'cve_details':
        let f = new CVEDetailsFetcher
        console.log(request.options.message)
        f.get(request.options.message, (response) => { 
          console.log(response)
          sendResponse(response)
        })
        break;
      default:
        break;
    }
    return true;
  });